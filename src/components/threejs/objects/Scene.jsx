'use client';

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 brunos-room-v1.glb --transform
*/

import React, { useEffect, useRef, useState } from 'react';
import { MathUtils, LoopOnce } from 'three';
import { useFrame } from '@react-three/fiber';
import { useAnimations, useGLTF, useScroll } from '@react-three/drei';
import { motion } from 'framer-motion-3d';

import { Camera, Cube, Room } from '@/components/threejs';
import { folder, useControls } from 'leva';

export const Scene = (props) => {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF('/3d/brunos-room-transformed.glb');
  const { actions } = useAnimations(animations, group);
  const scroll = useScroll();
  const [cube, setCube] = useState('initial');

  useEffect(() => void (actions['Camera Scroll'].play().paused = true), []);

  // reset scroll offset to the start once the room is shown and the cube is hidden
  useEffect(() => void (cube === 'hidden' && (scroll.offset = 0)), [cube]);

  // Camera Constants
  const camRotationX = -1.5707963267,
    camRotationY = 0;
  const cameraOptions = useControls('Camera', {
    Position: folder({
      'Enable [Position]': true,
      'Multiplier [Position]': { value: 0.25, step: 0.1 },
      'Speed [Position]': { value: 0.1, step: 0.1 },
    }),
    Rotation: folder({
      'Enable [Rotation]': true,
      'Up/Down': true,
      'Left/Right': true,
      'Threshold [Rotation]': { value: 0.75, step: 0.1 },
      'Multiplier [Rotation]': { value: 0.5, step: 0.1 },
      'Speed [Rotation]': { value: 1, step: 0.1 },
    }),
  });

  useFrame(({ camera, pointer }, delta) => {
    // console.log('cube:', cube, '  |   offset:', scroll.offset);
    const cameraAction = actions['Camera Scroll'],
      cubeAction = actions['Cube Animation'];

    // Play cube animation on first scroll
    if (cube === 'initial' && scroll.offset > 0) {
      cubeAction.clampWhenFinished = true;
      cubeAction.setLoop(LoopOnce).play();
      setCube('animating');
    }
    // Show room during cube animation before the cube is hidden
    else if (cube === 'animating' && cubeAction.time >= cubeAction.getClip().duration * 0.35) setCube('show room');
    // Hide cube once its animation is done
    else if (cube === 'show room' && cubeAction.time === cubeAction.getClip().duration) setCube('hidden');
    // Enable camera scroll + controls
    else if (cube === 'hidden') {
      cameraAction.time = MathUtils.lerp(cameraAction.time, cameraAction.getClip().duration * scroll.offset, 0.05);
      // Camera Position
      camera.position.lerp(
        cameraOptions['Enable [Position]']
          ? { x: pointer.x * cameraOptions['Multiplier [Position]'], y: 0, z: -pointer.y * cameraOptions['Multiplier [Position]'] }
          : { x: 0, y: 0, z: 0 },
        cameraOptions['Speed [Position]']
      );

      // Camera Rotation
      if (cameraOptions['Enable [Rotation]']) {
        camera.rotation.x = MathUtils.lerp(
          camera.rotation.x,
          Math.abs(pointer.y) > cameraOptions['Threshold [Rotation]'] && cameraOptions['Up/Down']
            ? camRotationX + pointer.y * cameraOptions['Multiplier [Rotation]'] * scroll.offset
            : camRotationX,
          delta * scroll.offset * cameraOptions['Speed [Rotation]']
        );
        camera.rotation.y = MathUtils.lerp(
          camera.rotation.y,
          Math.abs(pointer.x) > cameraOptions['Threshold [Rotation]'] && cameraOptions['Left/Right']
            ? -pointer.x * cameraOptions['Multiplier [Rotation]'] * scroll.offset
            : camRotationY,
          delta * scroll.offset * cameraOptions['Speed [Rotation]']
        );
      }
    }
  });

  return (
    <group ref={group} name='Scene_Container' {...props} dispose={null}>
      <Camera />

      <motion.group name='Room_Container' position={[0.01, -0.3, -0.01]}>
        {cube !== 'hidden' && <Cube nodes={nodes} materials={materials} />}
        {(cube === 'show room' || cube === 'hidden') && <Room nodes={nodes} materials={materials} />}
      </motion.group>
    </group>
  );
};

useGLTF.preload('/3d/brunos-room-transformed.glb');
