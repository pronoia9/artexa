'use client';

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.11 brunos-room-v1.glb --transform
*/

import React, { useEffect, useRef } from 'react';
import { MathUtils } from 'three';
import { PerspectiveCamera, useAnimations, useGLTF, useScroll } from '@react-three/drei';
import { useFrame } from '@react-three/fiber';

import { roomModel, BakedMaterial, Bookshelf, Chair, CoffeeTable, Couch, Desk, Cube, Guitar, TVUnit } from '@/components/threejs';

export const Room = ({ scrollRef, ...props }) => {
  const group = useRef(),
    cameraRef = useRef();
  const { nodes, materials, animations } = useGLTF(roomModel);
  const { actions } = useAnimations(animations, group);
  const scroll = useScroll();

  useEffect(() => void (actions['CameraAnimation'].play().paused = true), []);

  useFrame((state, delta) => {
    const action = actions['CameraAnimation'];
    action.time = MathUtils.lerp(action.time, action.getClip().duration * scroll.offset, 0.05);
    state.camera.position.lerp({ x: state.pointer.x / 4, y: 0, z: -state.pointer.y / 4 }, 0.1);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name='Scene'>
        <group name='SceneContainer' scale={0.73}>
          <BakedMaterial name='Room' geometry={nodes.Room.geometry} material={nodes.Room.material} rotation={[Math.PI, 0, Math.PI]}>
            <Bookshelf nodes={nodes} />
            <Chair nodes={nodes} />
            <CoffeeTable nodes={nodes} />
            <Couch nodes={nodes} />
            {/* <Cube nodes={nodes} /> */}
            <Desk nodes={nodes} />
            <Guitar nodes={nodes} />
            <TVUnit nodes={nodes} />
          </BakedMaterial>
        </group>
        <group ref={cameraRef} name='CameraContainer' position={[20.02, 15.24, 20.01]} rotation={[1.24, 0.3, -0.74]}>
          <PerspectiveCamera name='TrueIsoCam_1' makeDefault={true} far={1000} near={0.1} fov={22.9} rotation={[-Math.PI / 2, 0, 0]} />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload(roomModel);
