import { useRef } from 'react';
import { MathUtils } from 'three';
import { useFrame } from '@react-three/fiber';
import { useGLTF } from '@react-three/drei';
import { a as three } from '@react-spring/three';

import { dataStore } from '../../../store/dataStore';

export const Laptop = ({ hinge, ...props }) => {
  const { nodes, materials } = useGLTF('/macbook.glb');
  const { laptopOpen, setLaptopHover, cameraPosition, cameraPositions, setCameraPosition } = dataStore((state) => ({
    laptopOpen: state.laptopOpen,
    setLaptopHover: state.setLaptopHover,
    cameraPosition: state.cameraPosition,
    cameraPositions: state.cameraPositions,
    setCameraPosition: state.setCameraPosition,
  }));
  const { start, end } = cameraPositions;
  const groupRef = useRef();

  useFrame((state) => {
    const delay = !laptopOpen ? 0.25 : 1;
    state.camera.position.x = MathUtils.lerp(state.camera.position.x, laptopOpen ? end[0] : start[0], 0.075);
    state.camera.position.y = MathUtils.lerp(state.camera.position.y, laptopOpen ? end[1] : start[1], 0.05);
    state.camera.position.z = MathUtils.lerp(state.camera.position.z, laptopOpen ? end[2] : start[2], 0.025);
    groupRef.current.position.x = MathUtils.lerp(groupRef.current.position.x, laptopOpen ? -0.15 : 0, 0.1 * delay);
    groupRef.current.position.y = MathUtils.lerp(groupRef.current.position.y, laptopOpen ? -6 : -4, 0.1 * delay);
    if (cameraPosition.join('') !== Object.values(state.camera.position).join('')) setCameraPosition(Object.values(state.camera.position));
  });

  // The view was auto-generated by: https://github.com/pmndrs/gltfjsx
  // Events and spring animations were added afterwards
  return (
    <group
      ref={groupRef}
      onPointerOver={(e) => (e.stopPropagation(), setLaptopHover(true))}
      onPointerOut={(e) => setLaptopHover(false)}
      dispose={null}
      {...props}
    >
      <group position={[0.026, 0.077, -0.831]} rotation={[1.586, 0, 0]}>
        <mesh castShadow receiveShadow geometry={nodes.Base_1.geometry} material={materials['Body Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Base_2.geometry} material={materials['Bezel Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Base_3.geometry} material={materials['Keys Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Base_4.geometry} material={materials['Keys Light']} />
      </group>
      <three.group position={[0.026, 0.077, -0.811]} rotation-x={hinge}>
        <mesh castShadow receiveShadow geometry={nodes.Display_1.geometry} material={materials['Bezel Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Display_2.geometry} material={materials['Body Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Display_3.geometry} material={materials['Bezel Material']} />
        <mesh castShadow receiveShadow geometry={nodes.Display_4.geometry} material={materials['Apple Logo']} />
        <mesh castShadow receiveShadow geometry={nodes.Display_5.geometry} material={materials['Camera Lens']} />
        <mesh castShadow receiveShadow geometry={nodes.Logo.geometry} material={materials['Apple Logo']} />
      </three.group>
    </group>
  );
};
useGLTF.preload('/macbook.glb');
